system("c:/Users/yx/Dropbox/touchparse/hook_sam.exe")
samsung = 1
sony = 0
sonyz = 0
if(samsung)
{
# samsung
# Step 1: run autohotkey (control AnyBodyCon Script)
# convert to .exe
# setwd("C:/Program Files/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yaxuan/Dropbox/touchparse/hook.ahk\"")
system("e:/Dropbox/touchparse/hook.exe")
}else if(sony){
# sony
# Step 1: run autohotkey (control AnyBodyCon Script)
# setwd("C:/Program Files/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yaxuan/Dropbox/touchparse/hook_sony.ahk\"")
system("e:/Dropbox/touchparse/hook_sony.exe")
}else{
# sony
# Step 1: run autohotkey (control AnyBodyCon Script)
# setwd("C:/Program Files (x86)/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yx/Dropbox/touchparse/hook_sonyz.ahk\"")
system("e:/Dropbox/touchparse/hook_sonyz.exe")
}
samsung = 1
sony = 0
sonyz = 0
if(samsung)
{
# samsung
# Step 1: run autohotkey (control AnyBodyCon Script)
# convert to .exe
# setwd("C:/Program Files/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yaxuan/Dropbox/touchparse/hook.ahk\"")
system("e:/Dropbox/touchparse/hook.exe")
}else if(sony){
# sony
# Step 1: run autohotkey (control AnyBodyCon Script)
# setwd("C:/Program Files/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yaxuan/Dropbox/touchparse/hook_sony.ahk\"")
system("e:/Dropbox/touchparse/hook_sony.exe")
}else{
# sony
# Step 1: run autohotkey (control AnyBodyCon Script)
# setwd("C:/Program Files (x86)/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yx/Dropbox/touchparse/hook_sonyz.ahk\"")
system("e:/Dropbox/touchparse/hook_sonyz.exe")
}
samsung = 1
sony = 0
sonyz = 0
if(samsung)
{
# samsung
# Step 1: run autohotkey (control AnyBodyCon Script)
# convert to .exe
# setwd("C:/Program Files/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yaxuan/Dropbox/touchparse/hook.ahk\"")
system("e:/Dropbox/touchparse/hook.exe")
}else if(sony){
# sony
# Step 1: run autohotkey (control AnyBodyCon Script)
# setwd("C:/Program Files/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yaxuan/Dropbox/touchparse/hook_sony.ahk\"")
system("e:/Dropbox/touchparse/hook_sony.exe")
}else{
# sony
# Step 1: run autohotkey (control AnyBodyCon Script)
# setwd("C:/Program Files (x86)/AutoHotkey/Compiler/")
# system("Ahk2Exe.exe /in \"c:/Users/yx/Dropbox/touchparse/hook_sonyz.ahk\"")
system("e:/Dropbox/touchparse/hook_sonyz.exe")
}
library(recommenderlab) # package being evaluated
library(ggplot2) # For plots
m <- matrix(sample(c(0,1), 50, replace=TRUE), nrow=5, ncol=10,
dimnames=list(users=paste("u", 1:5, sep=''),
items=paste("i", 1:10, sep='')))
m
## coerce it into a binaryRatingMatrix
b <- as(m, "binaryRatingMatrix")
b
b
as(b, "matrix")
dim(b)
dimnames(b)
rowCounts(b)
colCounts(b)
## plot
image(b)
sample(b,2)
b[1:2,1:5]
as(b, "list")
head(as(b, "data.frame"))
head(getData.frame(b, ratings=FALSE))
## creation from user/item tuples
df <- data.frame(user=c(1,1,2,2,2,3), items=c(1,4,1,2,3,5))
df
b2 <- as(df, "binaryRatingMatrix")
b2
as(b2, "matrix")
data(Jester5k)
## create 90/10 split (known/unknown) for the first 500 users in Jester5k
e <- evaluationScheme(Jester5k[1:500,], method="split", train=0.9,
k=1, given=15)
e
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
r
data(Jester5k)
## create 90/10 split (known/unknown) for the first 500 users in Jester5k
e <- evaluationScheme(Jester5k[1:500,], method="split", train=0.9,
k=1, given=15)
e
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
p <- predict(r, getData(e, "known"), type="ratings")
p
data(MSWeb)
## between 5 users
dissimilarity(MSWeb[1:5,], method = "jaccard")
MSWeb[1:5,]
as(MSWeb[1:5,], "matrix")
as.data.frame(MSWeb[1:5,])
as.matrix(MSWeb[1:5,])
similarity(MSWeb[1:5,], method = "jaccard")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("skmeans")
set.seed(1234)
## Use CLUTO dataset 're0' and the reader for CLUTO sparse matrix
## format in package 'slam'. (In text clustering applications, x will
## often be a DocumentTermMatrix object obtained from package 'tm'.)
x <- slam::read_stm_CLUTO(system.file("cluto", "re0.mat",
package = "skmeans"))
## Which is not really small:
dim(x)
x
hparty <- skmeans(x, 5, control = list(verbose = TRUE))
## Criterion value obtained:
hparty$value
library("skmeans")
hparty <- skmeans(x, 5, control = list(verbose = TRUE))
## Criterion value obtained:
hparty$value
class_ids <- attr(x, "rclass")
table(class_ids, hparty$cluster)
require("cluster")
plot(silhouette(hparty))
sparty <- skmeans(x, 5, m = 1.1,
control = list(nruns = 5, verbose = TRUE))
sparty$value
## (This should be a lower bound for the criterion value of the hard
## partition.)
## Compare the soft and hard partitions:
table(hparty$cluster, sparty$cluster)
## Or equivalently using the high-level accessors from package 'clue':
require("clue")
table(cl_class_ids(hparty), cl_class_ids(sparty))
## Which can also be used for computing agreement/dissimilarity measures
## between the obtained partitions.
cl_agreement(hparty, sparty, "Rand")
## How fuzzy is the obtained soft partition?
cl_fuzziness(sparty)
## And in fact, looking at the membership margins we see that the
## "sureness" of classification is rather high:
summary(cl_margin(sparty))
setwd("E:/Dropbox/workspace/p_recommend_stroke/src")
source("../R.src/common.R")
source("../R.src/my.fig.R")
source("../R.src/my.legend.R")
source("../R.src/legend_col.R")
source("../R.src/rey.f.R")
source("../R.src/yx.common.R")
# utils:::menuInstallPkgs()
# install.packages("")
require(Hmisc)
require(plotrix)
library(Hmisc)
library(plotrix)
name.d = c("time", "type", "event", "value")
name.d2 = c("t", "sl", "id", "lv", "x", "y", "prs")
#origin data
odir <- "../origin data/"
#處理後的log檔
cdir <- "../complete data/"
#遊戲跟其code的列表
gn <- "../gn.txt"
#設定參數
ntect = -9 #設定none detect為-9
time_limit = 60 #game log檔至少要60S以上
gcode = read.table(gn, header=T, sep="\t", as.is=T, encoding="UTF-8") #讀取game列表
p.list=c('1201sub01','1202sub01','1202sub02', '1203sub01', '1205sub01','1205sub02') #設定player列表
#table:game name vs game code
gcode = read.table(gn, header=T, sep="\t", as.is=T, encoding="UTF-8") #讀取game列表
cdir_path = paste(cdir, "d2", sep="")
allsub = list.files(path=cdir_path, full=T)
name.allsub=list.files(path=cdir_path)
fn = paste(cdir, "ss.all", sep="")
ss=read.table(fn, header=T)
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == s)
seg.part = sapply(ss[isd,1:72], mean)
seg.part = cbind(ss[isd,73:74], seg.part)
cat(seg.part, "\n")
}
}
sink()
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
seg.part = sapply(ss[isd,1:72], mean)
seg.part = cbind(ss[isd,73:74], seg.part)
cat(seg.part, "\n")
}
}
sink()
gcode$gc
g
sub
isd = which(ss$code == g & ss$user == sub)
isd
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = cbind(ss[isd,73:74], seg.part)
cat(seg.part, "\n")
}
}
sink()
g
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(ss[isd,73:74], seg.part)
cat(seg.part, "\n")
}
}
sink()
g=gcode$gc
g=gcode$gc[2]
isd = which(ss$code == g & ss$user == sub)
isd
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(ss[isd,73:74], seg.part)
cat(seg.part, "\n")
seg.part
g
sub
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(ss[g, sub, seg.part)
seg.part = c(g, sub, seg.part)
cat(seg.part, "\n")
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(g, sub, seg.part)
cat(seg.part, "\n")
}
}
sink()
d = read.table("feature.txt")
names(d)
names(ss)
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
}
}
sink()
d = read.table("feature.txt")
names(d) = names(ss)[1:72]
d = read.table("feature.txt")
names(d) = names(ss)
d
View(d)
gcode$gc
p.list
g
sub
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
d = read.table("feature.txt")
View(d)
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
}
}
cat(seg.part, "\n")
?write.table
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
write.table(seg.part, file = "feature.txt" , append = T)
}
}
d = read.table("feature.txt")
d
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
write.table(seg.part, file = "feature.txt" , append = T)
}
}
g
sub
g=gcode$gc[2]
sub
isd = which(ss$code == g & ss$user == sub)
isd
sub=p.list[1]
isd = which(ss$code == g & ss$user == sub)
iusd
isd
len(isd)
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(!len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
write.table(seg.part, file = "feature.txt" , append = T)
}
}
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(!len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
write.table(seg.part, file = "feature.txt" , append = T)
}
}
sink("feature.txt")
for(g in gcode$gc){
for(sub in p.list){
isd = which(ss$code == g & ss$user == sub)
if(!len(isd))
next
seg.part = sapply(ss[isd,1:72], mean)
seg.part = c(seg.part, sub, g)
cat(seg.part, "\n")
#     write.table(seg.part, file = "feature.txt" , append = T)
}
}
sink()
d = read.table("feature.txt")
names(d) = names(ss)
View(d)
sub
data.now = d[which(ss$user==sub),]
data.now
View(data.now)
View(d)
d[which(ss$user==sub),]
sub
ss$user
nrow(ss)
data.now = d[which(d$user==sub),]
data.now
fn.std = paste(cdir, "std/", sub, ".csv", sep="")
std = read.table(fn.std)
std
std = std[,-(1:3)]
game.list = unique(data.now$code)
d6 = data.frame()
for(game in game.list){
n = grep(game, std$code)   #回傳fn.part的位置，如果吻合
if(length(n)==0)
next
d6 = rbind(d6, std[n,])
}
d6
View(data.now)
d6 = d6[,-1]
d6 = cbind(data.now, d6)
d6
for(sub in p.list){
data.now = d[which(d$user==sub),]
fn.std = paste(cdir, "std/", sub, ".csv", sep="")
std = read.table(fn.std)
std = std[,-(1:3)]
game.list = unique(data.now$code)
d6 = data.frame()
for(game in game.list){
n = grep(game, std$code)   #回傳fn.part的位置，如果吻合
if(length(n)==0)
next
d6 = rbind(d6, std[n,])
}
d6 = d6[,-1]
d6 = cbind(data.now, d6)
fn.d6 = paste(cdir, "d7/",  sub, ".txt", sep="")
write.table(d6, fn.d6)
}
for(sub in p.list){
data.now = d[which(d$user==sub),]
fn.std = paste(cdir, "std/", sub, ".csv", sep="")
std = read.table(fn.std)
std = std[,-(1:3)]
game.list = unique(data.now$code)
d6 = data.frame()
for(game in game.list){
n = grep(game, std$code)   #回傳fn.part的位置，如果吻合
if(length(n)==0)
next
d6 = rbind(d6, std[n,])
}
d6 = d6[,-1]
d6 = cbind(data.now, d6)
fn.d6 = paste(cdir, "d7/",  sub, ".txt", sep="")
write.table(d6, fn.d6)
}
sub
fn.d7 = paste(cdir, "d7/",  sub, ".txt", sep="")
d7 = read.table(fn.d7)
# remove the lines in this dataframe that contain NAs across all columns
d7 = d7[complete.cases(d7),]
d7
names(d7)
f.list = c(1:64,76)
d7 = read.table(fn.d7)
# remove the lines in this dataframe that contain NAs across all columns
d7 = d7[complete.cases(d7),f.list]
fit<-lm(action ~ ., data = d7)
summary(fit) # show results
coefficients(fit) # model coefficients
d7
d7 = read.table(fn.d7)
View(`d7`)
p.list
sub=p.list[1]
fn.d7 = paste(cdir, "d7/",  sub, ".txt", sep="")
f.list = c(1:64,76)
d7 = read.table(fn.d7)
# remove the lines in this dataframe that contain NAs across all columns
d7 = d7[complete.cases(d7),f.list]
fit <- lm(action ~ ., data = d7)
summary(fit) # show results
f.list = c(1:3, 19:68, 76)
f.list
d7 = read.table(fn.d7)
# remove the lines in this dataframe that contain NAs across all columns
d7 = d7[complete.cases(d7),f.list]
fit <- lm(action ~ ., data = d7)
summary(fit) # show results
f.list = c(4:15,17)
fn.d6 = paste(cdir, "d6/",  sub, ".txt", sep="")
d6 = read.table(fn.d6)
d6 = d6[complete.cases(d6),f.list]
fit<-lm(action ~ ., data = d6)
summary(fit) # show results
View(`d6`)
